class StarRating {
  constructor(selector, options = {}) {
    this.defaultOptions = {
      classNames: {
        active: "gl-active",
        base: "gl-star-rating",
        selected: "gl-selected",
      },
      clearable: true,
      maxStars: 10,
      prebuilt: false,
      stars: null,
      tooltip: "Select a Rating",
      onRatingSelected: null,
    };

    this.props = { ...this.defaultOptions, ...options };
    this.selector = selector;
    this.widgets = [];
    this.init();
  }

  init() {
    this.queryElements(this.selector).forEach((el) => {
      if (el.tagName !== "SELECT" || el.widget) return;

      let config = { ...this.props, ...this.getElementOptions(el) };
      this.widgets.push(new StarWidget(el, config));
    });
  }

  queryElements(selector) {
    if (selector instanceof HTMLSelectElement) return [selector];
    if (selector instanceof NodeList) return [...selector];
    return document.querySelectorAll(selector);
  }

  getElementOptions(el) {
    try {
      return JSON.parse(el.getAttribute("data-options")) || {};
    } catch (e) {
      return {};
    }
  }

  destroy() {
    this.widgets.forEach((widget) => widget.destroy());
    this.widgets = [];
  }
}

class StarWidget {
  constructor(el, props) {
    this.el = el;
    this.props = props;
    this.values = this.getValues();
    this.indexActive = null;
    this.indexSelected = this.selected();
    this.widgetEl = null;
    this.tick = null;
    this.ticking = false;

    this.build();
  }

  getValues() {
    return [...this.el.options]
      .map((opt, index) => ({
        index,
        text: opt.text,
        value: parseInt(opt.value, 10) || 0,
      }))
      .filter((opt) => opt.value > 0)
      .sort((a, b) => a.value - b.value);
  }

  build() {
    this.destroy();
    this.buildWidget();
    this.selectValue(this.indexSelected, false);
    this.attachEvents();
    this.el.widget = this;
  }

  buildWidget() {
    let wrapper = document.createElement("div");
    wrapper.className = this.props.classNames.base;
    this.el.parentNode.insertBefore(wrapper, this.el);
    wrapper.appendChild(this.el);

    this.widgetEl = document.createElement("div");
    this.widgetEl.className = `${this.props.classNames.base}--stars`;
    wrapper.appendChild(this.widgetEl);

    this.values.forEach((val, idx) => {
      let star = document.createElement("span");
      star.setAttribute("data-index", idx);
      star.setAttribute("data-value", val.value);
      star.innerHTML = "&#9733;";
      this.widgetEl.appendChild(star);
    });
  }

  attachEvents() {
    this.widgetEl.addEventListener("click", (e) => this.handleStarClick(e));
    this.widgetEl.addEventListener("mousemove", (e) => this.handleStarHover(e));
    this.widgetEl.addEventListener("mouseleave", () => this.resetHover());
  }

  handleStarClick(event) {
    let index = this.getStarIndex(event);
    if (this.props.clearable && index === this.indexSelected) {
      index = -1;
    }
    this.selectValue(index, true);
  }

  handleStarHover(event) {
    let index = this.getStarIndex(event);
    this.updateStars(index);
  }

  resetHover() {
    this.updateStars(this.indexSelected);
  }

  getStarIndex(event) {
    let star = event.target.closest("span");
    return star ? [...this.widgetEl.children].indexOf(star) : -1;
  }

  selectValue(index, triggerChange) {
    this.indexSelected = index;
    this.el.value = index >= 0 ? this.values[index].value : "";
    this.updateStars(index);
    if (triggerChange) this.triggerChangeEvent();
  }

  updateStars(index) {
    [...this.widgetEl.children].forEach((star, idx) => {
      star.classList.toggle(this.props.classNames.active, idx <= index);
      star.classList.toggle(
        this.props.classNames.selected,
        idx === this.indexSelected
      );
    });
  }

  triggerChangeEvent() {
    this.el.dispatchEvent(new Event("change"));
    if (typeof this.props.onRatingSelected === "function") {
      const selectedValue =
        this.indexSelected >= 0 ? this.values[this.indexSelected].value : 0;
      this.props.onRatingSelected(selectedValue);
    }
  }

  selected() {
    return this.values.findIndex((opt) => opt.value == this.el.value);
  }

  destroy() {
    this.el.parentNode.replaceChild(this.el, this.el.parentNode.firstChild);
  }
}

// Example usage:
const rating = new StarRating(".star-rating", {
  clearable: true,
  maxStars: 5,
  tooltip: "Rate this",
  onRatingSelected: (value) => {
    console.log(`Selected Rating: ${value}`);
    alert(`You selected a rating of ${value}`);
  },
});
